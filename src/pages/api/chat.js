import OpenAI from 'openai';
import { aiKnowledge, aiPrompts } from '../../lib/ai-knowledge';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Helper function to detect language
function detectLanguage(text) {
  const arabicRegex = /[\u0600-\u06FF]/;
  return arabicRegex.test(text) ? 'arabic' : 'english';
}

// Helper function to get system prompt based on language
function getSystemPrompt(language) {
  const basePrompt = aiPrompts.system;
  
  if (language === 'arabic') {
    return `ÿ£ŸÜÿ™ ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ¥ÿÆÿµŸä ŸÑÿßÿ≥ŸÑÿßŸÖ ÿßŸÑÿ≥ŸäÿØ - ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ ŸàŸÇÿßÿ¶ÿØ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±. Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ¨Ÿäÿ® ŸÅŸÇÿ∑ ÿπŸÑŸâ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ÿßÿ≥ŸÑÿßŸÖ ÿßŸÑÿ≥ŸäÿØ ŸàŸÖŸáÿßÿ±ÿßÿ™Ÿá ŸàŸÖÿ¥ÿßÿ±ŸäÿπŸá ŸàÿÆÿ®ÿ±ÿßÿ™Ÿá.

ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©:
- ÿßŸÑÿßÿ≥ŸÖ: ÿßÿ≥ŸÑÿßŸÖ ÿßŸÑÿ≥ŸäÿØ
- ÿßŸÑŸÖÿ≥ŸÖŸâ ÿßŸÑŸàÿ∏ŸäŸÅŸä: ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ ŸàŸÇÿßÿ¶ÿØ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±
- ÿßŸÑŸÖŸàŸÇÿπ: ÿØÿ®Ÿäÿå ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©
- ÿßŸÑÿÆÿ®ÿ±ÿ©: 13+ ÿπÿßŸÖ
- ÿßŸÑÿ™ÿÆÿµÿµÿßÿ™: React Nativeÿå IBM MobileFirstÿå ÿ™ÿ∑ŸàŸäÿ± ŸÖÿ™ÿπÿØÿØ ÿßŸÑŸÖŸÜÿµÿßÿ™

ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:
1. ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ ÿßÿ≥ŸÑÿßŸÖ (ÿßŸÑÿ≥Ÿäÿ±ÿ© ÿßŸÑÿ∞ÿßÿ™Ÿäÿ©ÿå ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ÿå ÿßŸÑÿÆÿ®ÿ±ÿ©)
2. ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™ŸàÿßÿµŸÑ
3. ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØ/ŸÖŸÉÿßŸÑŸÖÿ©
4. ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ/ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©
5. ÿßŸÑŸàÿµŸàŸÑ ŸÑŸÑÿ≥Ÿäÿ±ÿ© ÿßŸÑÿ∞ÿßÿ™Ÿäÿ©/CV
6. ÿ¥ÿ±ÿ≠ ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©

ÿ£ÿ¨ÿ® ÿØÿßÿ¶ŸÖÿßŸã ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© Ÿàÿ®ÿ£ÿ≥ŸÑŸàÿ® ŸàÿØŸàÿØ ŸàŸÖŸáŸÜŸä. ŸÇÿØŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿØŸÇŸäŸÇÿ© ŸàŸÖŸÅŸäÿØÿ© ŸàŸàÿ¨Ÿá ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÑŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ© ÿπŸÜÿØ ÿßŸÑÿ≠ÿßÿ¨ÿ©.`;
  }
  
  return basePrompt;
}

// Helper function to create context from knowledge base
function createContext(language) {
  const context = {
    personal: aiKnowledge.personal,
    bio: aiKnowledge.bio,
    skills: aiKnowledge.skills,
    experience: aiKnowledge.experience,
    projects: aiKnowledge.projects,
    contact: aiKnowledge.contact,
    booking: aiKnowledge.booking,
    resume: aiKnowledge.resume
  };

  if (language === 'arabic') {
    return {
      personal: {
        name: "ÿßÿ≥ŸÑÿßŸÖ ÿßŸÑÿ≥ŸäÿØ",
        title: "ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ ŸàŸÇÿßÿ¶ÿØ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±",
        location: "ÿØÿ®Ÿäÿå ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©",
        email: "islammohamed12@gmail.com",
        linkedin: "linkedin.com/in/islammohamed92",
        github: "github.com/islammohamed92",
        languages: ["ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿ£ŸÖ)", "ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© (ŸÖÿ™ŸÇÿØŸÖ)"],
        experience: "13+ ÿπÿßŸÖ",
        availability: "ŸÖÿ™ÿßÿ≠ ŸÑŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ¨ÿØŸäÿØÿ© ŸàÿßŸÑŸÅÿ±ÿµ ÿßŸÑÿ™ÿπÿßŸàŸÜŸäÿ©"
      },
      bio: {
        summary: "ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ ÿ∞Ÿà ÿÆÿ®ÿ±ÿ© ŸÅŸä React Native Ÿà IBM MobileFirst ŸÖÿπ ŸÇÿØÿ±ÿßÿ™ ŸÇŸäÿßÿØŸäÿ© ŸÅŸä ÿ•ÿØÿßÿ±ÿ© ŸÅÿ±ŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±. ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ®ŸÜÿßÿ° ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿπÿßŸÑŸäÿ© ÿßŸÑÿ£ÿØÿßÿ° Ÿàÿ™ÿ∑ŸàŸäÿ± ÿ≠ŸÑŸàŸÑ ÿ≠ŸÉŸàŸÖŸäÿ© ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©.",
        background: "ŸÖŸÜ ŸÖÿµÿ± ÿ•ŸÑŸâ ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©ÿå ÿÆÿ®ÿ±ÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÅŸä ÿ™ÿ∑ŸàŸäÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ ŸàÿßŸÑŸàŸäÿ® ŸÖÿπ ÿ™ÿ±ŸÉŸäÿ≤ ÿπŸÑŸâ ÿ≠ŸÑŸàŸÑ ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿßÿ™ ŸàÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä.",
        expertise: "ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ŸÑŸàŸÑ ÿ¨ŸàÿßŸÑ ŸÖÿ®ÿ™ŸÉÿ±ÿ© ŸàÿÆÿ®ÿ±ÿ© Ÿàÿßÿ≥ÿπÿ© ŸÅŸä React Native Ÿà IBM MobileFirst Ÿàÿ™ÿ∑ŸàŸäÿ± ŸÖÿ™ÿπÿØÿØ ÿßŸÑŸÖŸÜÿµÿßÿ™."
      },
      skills: aiKnowledge.skills,
      experience: aiKnowledge.experience,
      projects: aiKnowledge.projects,
      contact: aiKnowledge.contact,
      booking: aiKnowledge.booking,
      resume: aiKnowledge.resume,
      countries: {
        workedIn: [
          {
            country: "ŸÖÿµÿ±",
            flag: "üá™üá¨",
            period: "2011 - 2021",
            roles: ["ŸÖÿ∑Ÿàÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ", "ŸÖÿ∑Ÿàÿ± ÿ®ÿ±ŸÖÿ¨Ÿäÿßÿ™"],
            companies: ["Innovation Labs", "ÿ¥ÿ±ŸÉÿßÿ™ ÿ™ŸÇŸÜŸäÿ© ŸÖÿÆÿ™ŸÑŸÅÿ©"],
            highlights: ["ÿ®ÿØÿ£ÿ™ ŸÖÿ≥Ÿäÿ±ÿ™Ÿä ŸÅŸä ÿ™ÿ∑ŸàŸäÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ¨ŸàÿßŸÑ", "ÿ∑Ÿàÿ±ÿ™ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ 10 ÿ™ÿ∑ÿ®ŸäŸÇ ÿ¨ŸàÿßŸÑ", "ÿßŸÉÿ™ÿ≥ÿ®ÿ™ ÿÆÿ®ÿ±ÿ© ÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÅŸä React Native Ÿà Flutter"]
          },
          {
            country: "ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©",
            flag: "üá¶üá™",
            period: "2021 - ÿßŸÑÿ≠ÿßŸÑŸä",
            roles: ["ŸÖÿ∑Ÿàÿ± ÿ¨ŸàÿßŸÑ ŸÖÿ™ŸÇÿØŸÖ", "ŸÇÿßÿ¶ÿØ ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±"],
            companies: ["Tech Solutions Inc.", "ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≠ŸÉŸàŸÖÿ© ÿßŸÑÿ±ŸÇŸÖŸäÿ©"],
            highlights: ["ŸÇÿßÿØÿ™ ŸÅÿ±ŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±", "ÿ∑Ÿàÿ±ÿ™ ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿßÿ™", "ÿπŸÖŸÑÿ™ ÿπŸÑŸâ ŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑÿ™ÿ≠ŸàŸÑ ÿßŸÑÿ±ŸÇŸÖŸä ÿßŸÑÿ≠ŸÉŸàŸÖŸäÿ©", "ÿØÿ±ÿ®ÿ™ ÿßŸÑŸÖÿ∑Ÿàÿ±ŸäŸÜ ÿßŸÑŸÖÿ®ÿ™ÿØÿ¶ŸäŸÜ"]
          }
        ],
        totalExperience: "13+ ÿπÿßŸÖ ŸÅŸä ÿπÿØÿ© ÿØŸàŸÑ",
        internationalExperience: "ÿÆÿ®ÿ±ÿ© ŸÅŸä ÿßŸÑÿπŸÖŸÑ ŸÅŸä ÿ®Ÿäÿ¶ÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÇ ÿßŸÑÿ£Ÿàÿ≥ÿ∑ ŸàÿßŸÑÿØŸàŸÑŸäÿ©",
        culturalAdaptability: "ÿ™ÿ£ŸÇŸÑŸÖÿ™ ŸÖÿπ ÿ´ŸÇÿßŸÅÿßÿ™ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿÆÿ™ŸÑŸÅÿ© ŸàÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©"
      },
      countries: aiKnowledge.countries
    };
  }

  return context;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { messages } = req.body;

  if (!messages || !Array.isArray(messages)) {
    return res.status(400).json({ error: 'Messages array is required' });
  }

  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ 
      role: 'assistant', 
      content: 'API key not configured. Please check environment settings.' 
    });
  }

  try {
    // Detect language from the last user message
    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    const language = lastUserMessage ? detectLanguage(lastUserMessage.content) : 'english';
    
    // Create context based on language
    const context = createContext(language);
    
    // Create system prompt
    const systemPrompt = getSystemPrompt(language);
    
    // Create detailed context for the AI
    const detailedContext = `
${systemPrompt}

Detailed Information:

Personal Information:
${JSON.stringify(context.personal, null, 2)}

Bio:
${JSON.stringify(context.bio, null, 2)}

Skills:
${JSON.stringify(context.skills, null, 2)}

Experience:
${JSON.stringify(context.experience, null, 2)}

Projects:
${JSON.stringify(context.projects, null, 2)}

Contact Information:
${JSON.stringify(context.contact, null, 2)}

Booking Information:
${JSON.stringify(context.booking, null, 2)}

Resume Information:
${JSON.stringify(context.resume, null, 2)}

Countries Worked In:
${JSON.stringify(context.countries, null, 2)}

Instructions:
- Answer questions about Islam's skills, experience, projects, and contact information
- Provide specific details when asked about tech stack, projects, or experience
- Offer to help with booking meetings, downloading resume, or getting contact information
- Be helpful and professional in your responses
- If asked about booking a call, provide the Calendly link and instructions: ${context.booking.directLink} - ${context.booking.instructions}
- If asked about resume/CV, mention it can be downloaded from the website
- If asked about contact info, provide email and LinkedIn details
- When providing Calendly links, always include the direct link and mention it opens in a new tab
- If asked about countries worked in, provide detailed information about Egypt and UAE experience
`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: detailedContext
        },
        ...messages
      ],
      max_tokens: 800,
      temperature: 0.7
    });

    const aiMessage = { 
      role: 'assistant', 
      content: completion.choices[0].message.content 
    };
    
    res.status(200).json(aiMessage);
  } catch (error) {
    console.error('OpenAI API Error:', error);
    
    const errorMessage = language === 'arabic' 
      ? 'ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
      : 'Sorry, there was a connection error. Please try again.';
    
    res.status(500).json({ 
      role: 'assistant', 
      content: errorMessage 
    });
  }
} 